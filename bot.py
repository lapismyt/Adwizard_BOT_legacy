from telebot import TeleBot
from telebot import types
import models
from models import GPT_MODELS
import os
import time
import speech_recognition as sr
from pydub import AudioSegment
import openai
import random

openai.api_base = "https://api.proxyapi.ru/openai/v1"

with open("token.txt") as f:
    token = f.read().strip()

bot = TeleBot(token)

@bot.message_handler(commands=["copy"])
def copy(message):
    filename = f"data-{int(time.time())}.json"
    os.system(f"cp data.json copies/{filename}")
    with open(f"copies/{filename}", "rb") as f:
        bot.send_document(message.from_user.id, f)
    bot.send_message(message.chat.id, "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞.")

@bot.message_handler(commands=["start"])
def cmd_start(message):
    data = models.Data.load()
    if data.get_user(message.from_user.id) is None:
        user = models.User(message.from_user.id)
        data.users.append(user)
        data.dump()
        bot.send_message(message.chat.id, "*–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å - —Å–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —á—ë–º-–Ω–∏–±—É–¥—å. –ú–æ–¥–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç, –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, –∏–ª–∏ —Å–æ—á–∏–Ω–∏—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ.\n\n–ß–∞—Ç - https://t.me/+cRAejyefoDsyMTky.*", disable_web_page_preview=True, parse_mode="markdown")
        bot.send_message(message.chat.id, "*–Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–∏ - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è. –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞, –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ, –∏–º–∏—Ç–∞—Ü–∏—è Linux-—Ç–µ—Ä–º–∏–Ω–∞–ª–∞ - –ø–æ—á—Ç–∏ –≤—Å—ë, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º, –º–æ–≥—É –¥–µ–ª–∞—Ç—å —è, –≥–ª–∞–≤–Ω–æ–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π. –ù–∞–π—Ç–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ - https://t.me/+cRAejyefoDsyMTky.*", disable_web_page_preview=True, parse_mode="markdown")
    elif len(message.text) > 8:
        if message.text.removeprefix("/start ") in data.promos:
            user = data.get_user(message.from_user.id)
            user.premium = True
            data.promos.remove(message.text.removeprefix("/start "))
            data.dump()
            bot.send_message("5373440151", f"[{message.from_user.id}](tg://user?id={message.from_user.id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —á–µ–∫.", parse_mode="markdown")
            bot.send_message(message.chat.id, "–ß–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        else:
            bot.send_message(message.chat.id, "–ß–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

@bot.message_handler(commands=["clear"])
def clear_context(message):
    data = models.Data.load()
    user = data.get_user(message.from_user.id)
    s = data.get_scenario(user.settings.scenario)
    user.settings.conversation = [{"role": "system", "content": s}]
    data.dump()
    bot.send_message(message.chat.id, "*üßπ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞.*", parse_mode="markdown")

@bot.message_handler(commands=["model"])
def switch_model(message):
    data = models.Data.load()
    user = data.get_user(message.from_user.id)
    if message.text.lower() == "/model":
        bot.send_message(message.chat.id, "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n\n" + "\n".join(GPT_MODELS) + "*\n\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: " + user.settings.model, parse_mode="markdown")
        return None
    m = message.text[7:]
    if not user.premium:
        bot.send_message(message.chat.id, "–°–º–µ–Ω–∞ –º–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ Premium-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ö—É–ø–∏—Ç—å Premium –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞ 250‚ÇΩ -> @LapisMYT", parse_mode="markdown")
        return None
    if m in GPT_MODELS:
        user.settings.model = m
        data.dump()
        bot.send_message(message.chat.id, f"*–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {m}.*", parse_mode="markdown")
    else:
        bot.send_message(message.chat.id, "*–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n\n" + "\n".join(GPT_MODELS) + "*", parse_mode="markdown")

@bot.message_handler(commands=["scenario"])
def choose_scenario(message):
    if len(message.text) > 10:
        scenario = message.text.split()[1]
    else:
        bot.send_message(message.chat.id, "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/scenario [—Å—Ü–µ–Ω–∞—Ä–∏–π]`\n\n–°—Ü–µ–Ω–∞—Ä–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ: https://t.me/+cRAejyefoDsyMTky.*", parse_mode="markdown", disable_web_page_preview=True)
        return None
    data = models.Data.load()
    user = data.get_user(message.from_user.id)
    s = data.get_scenario(scenario)
    if s is None:
        bot.send_message(message.chat.id, "–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        user.settings.scenario = scenario
        data.dump()
        bot.send_message(message.chat.id, f"*–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/clear` –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –æ–Ω –∑–∞—Ä–∞–±–æ—Ç–∞–ª.\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é –∞–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/scenario default.`\n\n–ï—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.*", parse_mode="markdown")

@bot.message_handler(commands=["make_scenario"])
def make_scenario(message):
    if len(message.text.split()) >= 3:
        data = models.Data.load()
        if message.text.split()[1] in data.scenarios.keys():
            bot.send_message(message.chat.id, "–°—Ü–µ–Ω–∞—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return None
        cut = len(message.text.split()[1]) + 16
        data.scenarios[message.text.split()[1]] = message.text[cut:]
        data.dump()
        bot.send_message(message.chat.id, "*üóí –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω.*", parse_mode="markdown")
    else:
        bot.send_message(message.chat.id, "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /make_scenario [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–ø—Ä–æ–º–ø—Ç]*")

@bot.message_handler(commands=["cancel"])
def cmd_cancel(message):
    data = models.Data.load()
    user = data.get_user(message.from_user.id)
    user.settings.conversation = user.settings.conversation[:-2]
    data.dump()
    a = bot.send_message(message.chat.id, "*üïì –û—Ç–º–∞—Ç—ã–≤–∞—é –≤—Ä–µ–º—è –Ω–∞–∑–∞–¥...*", parse_mode="markdown")
    time.sleep(1)
    bot.send_message(message.chat.id, "*‚ú® –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å —Å—Ç—ë—Ä—Ç –∏–∑ —ç—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏!*", parse_mode="markdown")
    bot.delete_message(a.chat.id, a.message_id)

@bot.message_handler(commands=["sendall"])
def cmd_sendall(message):
    if message.from_user.id == 5373440151:
        data = models.Data.load()
        for usr in data.users:
            try:
                bot.forward_message(message.chat.id, usr.id, message.reply_to_message.message_id)
            except:
                print("–ê—à—ã–ø–∫–∞!")

@bot.message_handler(commands=["stats"])
def cmd_stats(message):
    data = models.Data.load()
    bot.send_message(message.chat.id, f"–í –±–æ—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç {len(data.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@bot.message_handler(commands=["image"])
def cmd_image(message):
    if len(message.text) < 8:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /image [–∑–∞–ø—Ä–æ—Å]")
        return None
    data = models.Data.load()
    user = data.get_user(message.from_user.id)
    if user.queued:
        bot.send_message(message.chat.id, "*‚è≥ –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å.*", parse_mode="markdown")
        return None
    else:
        user.queued = True
        data.dump()
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–æ–∂–¥–∏—Ç–µ...")
    if user.premium:
        model = "dall-e-3"
        size = "1024x1024"
    else:
        model = "dall-e-2"
        size = "512x512"
    success = False
    for x in range(4):
        try:
            res = openai.Image.create(
                prompt = message.text.removeprefix("/image "),
                n = 1,
                size = size,
                model = model
            )
            bot.send_photo(message.chat.id, res["data"][0]["url"])
            bot.delete_message(msg.chat.id, msg.message_id)
            success = True
            break
        except BaseException as err:
            print(repr(err))
    if not success:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞!")
    data = models.Data.load()
    user = data.get_user(message.from_user.id)
    user.queued = False
    data.dump()

@bot.message_handler(commands=["premium"])
def cmd_premium(message):
    if not str(message.from_user.username) == "LapisMYT":
        return None
    if len(message.text) < 10:
        data = models.Data.load()
        cheque = str(random.randint(10000000, 99999999))
        data.promos.append(cheque)
        data.dump()
        bot.send_message(message.chat.id, f"https://t.me/Adwizard_BOT?start={cheque}")
    else:
        if len(message.text.split()) >= 2:
            data = models.Data.load()
            user = data.get_user(message.text.split()[1])
            if not len(message.text.split()) == 3:
                bot.send_message(message.chat.id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{message.text.split()[1]}](tg://user?id={message.text.split()[1]}) –µ—Å—Ç—å Premium: {user.premium}", parse_mode="markdown")
                return None
            elif message.text.split()[2] == "on":
                user.premium = True
                data.dump()
                try:
                    bot.send_message(message.text.split()[1], "–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç Premium!")
                except:
                    pass
                bot.send_message(message.chat.id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{message.text.split()[1]}](tg://user?id={message.text.split()[1]}) –±–æ–ª—å—à–µ –Ω–µ—Ç Premium.", parse_mode="markdown")
                return None
            elif message.text.split()[2] == "off":
                user.premium = False
                data.dump()
                try:
                    bot.send_message(message.text.split()[1], "–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç Premium!")
                except:
                    pass
                bot.send_message(message.chat.id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{message.text.split()[1]}](tg://user?id={message.text.split()[1]}) —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å Premium.", parse_mode="markdown")
                return None

@bot.message_handler(content_types=["text"])
def text_handler(message):
    text = message.text
    if message.chat.type == "private":
        pass
    elif message.text.strip().lower().startswith("@adwizard_bot"):
        text = message.text.removeprefix("@Adwizard_BOT").strip()
    elif hasattr(message, "reply_to_message"):
        if message.reply_to_message is None:
            return None
        if not str(message.reply_to_message.from_user.id) == "6342888297":
            return None
        handle_req(message, text)
        return None
    elif message.text.startswith("/"):
        return None
    else:
        return None
    handle_req(message, text)

@bot.message_handler(commands=["skip"])
def cmd_skip(message):
    handle_req(message, None, skipped=True)

@bot.message_handler(content_types=["voice"])
def vc_handler(message):
    msg = bot.send_message(message.chat.id, "*üîä –°–ª—É—à–∞—é...*", parse_mode="markdown")
    voice_message = bot.get_file(message.voice.file_id)
    voice_file = bot.download_file(voice_message.file_path)
    vcid = f"vc-{int(time.time()*100)}"
    with open(f"tmp/{vcid}.ogg", "wb") as f:
        f.write(voice_file)
    audio = AudioSegment.from_ogg(f"tmp/{vcid}.ogg")
    audio.export(f"tmp/{vcid}.wav", format="wav")
    os.remove(f"tmp/{vcid}.ogg")
    recognizer = sr.Recognizer()
    with sr.AudioFile(f"tmp/{vcid}.wav") as source:
        audio_data = recognizer.record(source)
        text = recognizer.recognize_google(audio_data, language='ru-RU')
    bot.reply_to(message, f"*‚ùó –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {text}*", parse_mode="markdown")
    bot.delete_message(msg.chat.id, msg.message_id)
    if (not "chatgpt" in text.lower()) and (not message.chat.type == "private"):
        return None
    elif hasattr(message, "reply_to_message"):
        if message.reply_to_message is None:
            return None
        if not str(message.reply_to_message.from_user.id) == "6342888297":
            return None
    handle_req(message, text)

def handle_req(message, text, skipped=False):
    wait = bot.send_message(message.chat.id, "*üë®‚Äçüíª –ü–µ—á–∞—Ç–∞—é...*", parse_mode="markdown")
    data = models.Data.load()
    user = data.get_user(message.from_user.id)
    if user.queued:
        m = bot.send_message(message.chat.id, "*‚è≥ –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å.*", parse_mode="markdown")
        if not chat.type == "private":
            time.sleep(3)
            bot.delete_message(m.chat.id, m.message_id)
        return None
    else:
        user.queued = True
        data.dump()
    success = False
    tries = 0
    while (not success) and (tries <= 5):
        try:
            conv = user.settings.conversation
            if not skipped:
                conv.append({"role": "user", "content": text})
            else:
                conv.append({"role": "system", "content": "Continue, please"})
            response = openai.ChatCompletion.create(
                model = user.settings.model,
                messages = conv,
                temperature = 0.8,
                stream = False,
                max_tokens = 2048
            )
            response = response.choices[0].message.content
            data = models.Data.load()
            user = data.get_user(message.from_user.id)
            user.settings.conversation = conv[:]
            user.settings.conversation.append({"role": "assistant", "content": response})
            user.queued = False
            data.dump()
            bot.reply_to(message, response, parse_mode="markdown")
            bot.delete_message(wait.chat.id, wait.message_id)
            success = True
            return None
        except openai.error.InvalidRequestError as err:
            print(repr(err))
            tries = 6
            bot.reply_to(message, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear.")
        except BaseException as err:
            print(repr(err))
            time.sleep(3)
            tries += 1
    bot.reply_to(message, "*‚õî –û—à–∏–±–∫–∞!*", parse_mode="markdown")
    data = models.Data.load()
    user = data.get_user(message.from_user.id)
    user.queued = False
    data.dump()

if __name__ == "__main__":
    data = models.Data.load()
    for usr in data.users:
        usr.queued = False
    data.dump()
    bot.infinity_polling()
